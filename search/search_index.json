{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3","title":"Home"},{"location":"#_1","text":"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c"},{"location":"#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"#3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"LR1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 Practices : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0430\u0431\u043e\u0442 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. Auth : \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. DB : \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0441\u0441\u0438\u044f\u043c. Endpoints : \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. Models : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel. Main : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438 \u0441 leetcode.","title":"Home"},{"location":"LR1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"LR1/#_1","text":"\u0412 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/#_2","text":"Practices : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0430\u0431\u043e\u0442 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. Auth : \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. DB : \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0441\u0441\u0438\u044f\u043c. Endpoints : \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. Models : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel. Main : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438 \u0441 leetcode.","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430"},{"location":"LR1/auth/","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d\u044b JWT. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0432\u0445\u043e\u0434\u0430 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u043e\u0432 JWT. \u041a\u043e\u0434 from fastapi import APIRouter from models import UserBase, User, UserShow, ChangePassword import datetime from fastapi import Security, HTTPException, Depends from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from db import get_session from sqlmodel import select security = HTTPBearer() pwd_context = CryptContext(schemes=[\"bcrypt\"]) secret_key = \"supersecret\" def get_password_hash(password): return pwd_context.hash(password) def verify_password(password, hashed_password): return pwd_context.verify(password, hashed_password) def encode_token(user_id): payload = { \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=8), \"iat\": datetime.datetime.utcnow(), \"sub\": user_id, } return jwt.encode(payload, secret_key, algorithm=\"HS256\") def decode_token(token): try: payload = jwt.decode(token, secret_key, algorithms=[\"HS256\"]) return payload[\"sub\"] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail=\"Expired signature\") except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail=\"Invalid token\") def auth_wrapper(auth: HTTPAuthorizationCredentials = Security(security)): return decode_token(auth.credentials) def get_current_user( auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session), ): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(User).where(User.username == username)).first() if user is None: raise credentials_exception return user auth_router = APIRouter() @auth_router.post(\"/register\", status_code=201) def register(user: UserBase, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail=\"Username is taken\") hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post(\"/login\") def login(user: UserBase, session=Depends(get_session)): user_found = session.exec( select(User).where(User.username == user.username) ).first() if not user_found: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") token = encode_token(user_found.username) return {\"token\": token} @auth_router.get(\"/user\", response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def change_password( change_password: ChangePassword, session=Depends(get_session), current=Depends(get_current_user), ): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(change_password.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(change_password.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"}","title":"Authentication"},{"location":"LR1/auth/#_1","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d\u044b JWT.","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438"},{"location":"LR1/auth/#_2","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0432\u0445\u043e\u0434\u0430 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u043e\u0432 JWT.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/auth/#_3","text":"from fastapi import APIRouter from models import UserBase, User, UserShow, ChangePassword import datetime from fastapi import Security, HTTPException, Depends from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from db import get_session from sqlmodel import select security = HTTPBearer() pwd_context = CryptContext(schemes=[\"bcrypt\"]) secret_key = \"supersecret\" def get_password_hash(password): return pwd_context.hash(password) def verify_password(password, hashed_password): return pwd_context.verify(password, hashed_password) def encode_token(user_id): payload = { \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=8), \"iat\": datetime.datetime.utcnow(), \"sub\": user_id, } return jwt.encode(payload, secret_key, algorithm=\"HS256\") def decode_token(token): try: payload = jwt.decode(token, secret_key, algorithms=[\"HS256\"]) return payload[\"sub\"] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail=\"Expired signature\") except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail=\"Invalid token\") def auth_wrapper(auth: HTTPAuthorizationCredentials = Security(security)): return decode_token(auth.credentials) def get_current_user( auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session), ): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(User).where(User.username == username)).first() if user is None: raise credentials_exception return user auth_router = APIRouter() @auth_router.post(\"/register\", status_code=201) def register(user: UserBase, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail=\"Username is taken\") hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post(\"/login\") def login(user: UserBase, session=Depends(get_session)): user_found = session.exec( select(User).where(User.username == user.username) ).first() if not user_found: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") token = encode_token(user_found.username) return {\"token\": token} @auth_router.get(\"/user\", response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def change_password( change_password: ChangePassword, session=Depends(get_session), current=Depends(get_current_user), ): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(change_password.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(change_password.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"}","title":"\u041a\u043e\u0434"},{"location":"LR1/db/","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0435\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041a\u043e\u0434 from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() engine = create_engine(os.getenv(\"DB_URL\"), echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"Database"},{"location":"LR1/db/#_1","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0435\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b.","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR1/db/#_2","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/db/#_3","text":"from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() engine = create_engine(os.getenv(\"DB_URL\"), echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"\u041a\u043e\u0434"},{"location":"LR1/endpoints/","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 API \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f\u043c\u0438. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b API \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0447\u0442\u0435\u043d\u0438\u044f, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439. \u041a\u043e\u0434 import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, User ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.get(\"/user/{user_id}/schedules\") def user_schedules(user_id: int, session=Depends(get_session)) -> list[Schedule]: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") return session.query(Schedule).filter(Schedule.user_id == user_id).all() @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.get(\"/user/{user_id}/time-analysis\") def user_time_analysis(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"time_spent\": dict}): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") tasks = session.query(Task).filter(Task.user_id == user_id).all() time = { task.id: task.time_spent if task.time_spent is not None else 0 for task in tasks } return {\"status\": 200, \"time_spent\": time} @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at, user_id=reminder.user_id ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"}","title":"Endpoints"},{"location":"LR1/endpoints/#api","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f\u043c\u0438.","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 API"},{"location":"LR1/endpoints/#_1","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b API \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0447\u0442\u0435\u043d\u0438\u044f, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/endpoints/#_2","text":"import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, User ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.get(\"/user/{user_id}/schedules\") def user_schedules(user_id: int, session=Depends(get_session)) -> list[Schedule]: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") return session.query(Schedule).filter(Schedule.user_id == user_id).all() @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.get(\"/user/{user_id}/time-analysis\") def user_time_analysis(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"time_spent\": dict}): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") tasks = session.query(Task).filter(Task.user_id == user_id).all() time = { task.id: task.time_spent if task.time_spent is not None else 0 for task in tasks } return {\"status\": 200, \"time_spent\": time} @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at, user_id=reminder.user_id ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"}","title":"\u041a\u043e\u0434"},{"location":"LR1/leetcode/","text":"Reverse Words in a String Given an input string s , reverse the order of the words. class Solution: def reverseWords(self, s: str) -> str: return ' '.join(reversed(s.split())) Zigzag Conversion Given a string s and an integer numRows , convert s to a zigzag pattern on a given number of rows. class Solution: def convert(self, s: str, numRows: int) -> str: if numRows == 1 or numRows >= len(s): return s rows = [''] * numRows current_row, step = 0, 1 for char in s: rows[current_row] += char if current_row == 0: step = 1 elif current_row == numRows - 1: step = -1 current_row += step return ''.join(rows) Two Sum II - Input Array Is Sorted Given an array of integers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. class Solution: def twoSum(self, numbers: List[int], target: int) -> List[int]: left, right = 0, len(numbers) - 1 while left < right: total = numbers[left] + numbers[right] if total == target: return [left + 1, right + 1] elif total < target: left += 1 else: right -= 1 Container With Most Water Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai) , n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0) . Find two lines, which together with the x-axis forms a container, such that the container contains the most water. class Solution: def maxArea(self, height: List[int]) -> int: left, right = 0, len(height) - 1 max_area = 0 while left < right: width = right - left max_area = max(max_area, min(height[left], height[right]) * width) if height[left] < height[right]: left += 1 else: right -= 1 return max_area Best Time to Buy and Sell Stock II Say you have an array prices for which the i-th element is the price of a given stock on day i . Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). class Solution: def maxProfit(self, prices: List[int]) -> int: max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit Jump Game II Given an array of non-negative integers nums , you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. class Solution: def jump(self, nums: List[int]) -> int: jumps, current_end, farthest = 0, 0, 0 for i in range(len(nums) - 1): farthest = max(farthest, i + nums[i]) if i == current_end: jumps += 1 current_end = farthest return jumps H-Index Given an array of integers citations where citations[i] is the number of citations a researcher received for their i-th paper, calculate the researcher's h-index. class Solution: def hIndex(self, citations: List[int]) -> int: citations.sort(reverse=True) h = 0 for i, c in enumerate(citations): if c >= i + 1: h = i + 1 else: break return h Gas Station There are n gas stations along a circular route, where the amount of gas at station i is gas[i] . You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station ( i+1 ). You begin the journey with an empty tank at one of the gas stations. Return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1 . class Solution: def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int: total_gas, total_cost, start, tank = 0, 0, 0, 0 for i in range(len(gas)): total_gas += gas[i] total_cost += cost[i] tank += gas[i] - cost[i] if tank < 0: start = i + 1 tank = 0 return start if total_gas >= total_cost else -1 Integer to Roman Given an integer, convert it to a roman numeral. class Solution: def intToRoman(self, num: int) -> str: val = [ (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I') ] roman = '' for (i, r) in val: while num >= i: roman += r num -= i return roman Remove Duplicates from Sorted Array II Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. class Solution: def removeDuplicates(self, nums: List[int]) -> int: if len(nums) <= 2: return len(nums) index = 2 for i in range(2, len(nums)): if nums[i] != nums[index - 2]: nums[index] = nums[i] index += 1 return index Rotate Array Given an integer array nums , rotate the array to the right by k steps, where k is non-negative. class Solution: def rotate(self, nums: List[int], k: int) -> None: k %= len(nums) nums[:] = nums[-k:] + nums[:-k]","title":"Leetcode"},{"location":"LR1/leetcode/#reverse-words-in-a-string","text":"Given an input string s , reverse the order of the words. class Solution: def reverseWords(self, s: str) -> str: return ' '.join(reversed(s.split()))","title":"Reverse Words in a String"},{"location":"LR1/leetcode/#zigzag-conversion","text":"Given a string s and an integer numRows , convert s to a zigzag pattern on a given number of rows. class Solution: def convert(self, s: str, numRows: int) -> str: if numRows == 1 or numRows >= len(s): return s rows = [''] * numRows current_row, step = 0, 1 for char in s: rows[current_row] += char if current_row == 0: step = 1 elif current_row == numRows - 1: step = -1 current_row += step return ''.join(rows)","title":"Zigzag Conversion"},{"location":"LR1/leetcode/#two-sum-ii-input-array-is-sorted","text":"Given an array of integers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. class Solution: def twoSum(self, numbers: List[int], target: int) -> List[int]: left, right = 0, len(numbers) - 1 while left < right: total = numbers[left] + numbers[right] if total == target: return [left + 1, right + 1] elif total < target: left += 1 else: right -= 1","title":"Two Sum II - Input Array Is Sorted"},{"location":"LR1/leetcode/#container-with-most-water","text":"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai) , n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0) . Find two lines, which together with the x-axis forms a container, such that the container contains the most water. class Solution: def maxArea(self, height: List[int]) -> int: left, right = 0, len(height) - 1 max_area = 0 while left < right: width = right - left max_area = max(max_area, min(height[left], height[right]) * width) if height[left] < height[right]: left += 1 else: right -= 1 return max_area","title":"Container With Most Water"},{"location":"LR1/leetcode/#best-time-to-buy-and-sell-stock-ii","text":"Say you have an array prices for which the i-th element is the price of a given stock on day i . Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). class Solution: def maxProfit(self, prices: List[int]) -> int: max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit","title":"Best Time to Buy and Sell Stock II"},{"location":"LR1/leetcode/#jump-game-ii","text":"Given an array of non-negative integers nums , you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. class Solution: def jump(self, nums: List[int]) -> int: jumps, current_end, farthest = 0, 0, 0 for i in range(len(nums) - 1): farthest = max(farthest, i + nums[i]) if i == current_end: jumps += 1 current_end = farthest return jumps","title":"Jump Game II"},{"location":"LR1/leetcode/#h-index","text":"Given an array of integers citations where citations[i] is the number of citations a researcher received for their i-th paper, calculate the researcher's h-index. class Solution: def hIndex(self, citations: List[int]) -> int: citations.sort(reverse=True) h = 0 for i, c in enumerate(citations): if c >= i + 1: h = i + 1 else: break return h","title":"H-Index"},{"location":"LR1/leetcode/#gas-station","text":"There are n gas stations along a circular route, where the amount of gas at station i is gas[i] . You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station ( i+1 ). You begin the journey with an empty tank at one of the gas stations. Return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1 . class Solution: def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int: total_gas, total_cost, start, tank = 0, 0, 0, 0 for i in range(len(gas)): total_gas += gas[i] total_cost += cost[i] tank += gas[i] - cost[i] if tank < 0: start = i + 1 tank = 0 return start if total_gas >= total_cost else -1","title":"Gas Station"},{"location":"LR1/leetcode/#integer-to-roman","text":"Given an integer, convert it to a roman numeral. class Solution: def intToRoman(self, num: int) -> str: val = [ (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I') ] roman = '' for (i, r) in val: while num >= i: roman += r num -= i return roman","title":"Integer to Roman"},{"location":"LR1/leetcode/#remove-duplicates-from-sorted-array-ii","text":"Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. class Solution: def removeDuplicates(self, nums: List[int]) -> int: if len(nums) <= 2: return len(nums) index = 2 for i in range(2, len(nums)): if nums[i] != nums[index - 2]: nums[index] = nums[i] index += 1 return index","title":"Remove Duplicates from Sorted Array II"},{"location":"LR1/leetcode/#rotate-array","text":"Given an integer array nums , rotate the array to the right by k steps, where k is non-negative. class Solution: def rotate(self, nums: List[int], k: int) -> None: k %= len(nums) nums[:] = nums[-k:] + nums[:-k]","title":"Rotate Array"},{"location":"LR1/main/","text":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0438 \u043c\u043e\u0434\u0435\u043b\u0438. \u041a\u043e\u0434 from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router from auth import auth_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) app.include_router(auth_router, prefix=\"/auth\", tags=[\"auth\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"Main"},{"location":"LR1/main/#_1","text":"","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"LR1/main/#_2","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0438 \u043c\u043e\u0434\u0435\u043b\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/main/#_3","text":"from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router from auth import auth_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) app.include_router(auth_router, prefix=\"/auth\", tags=[\"auth\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"\u041a\u043e\u0434"},{"location":"LR1/models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b 1:M \u0438 M:M. \u041a\u043e\u0434 import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority user_id: int = Field(default=None, foreign_key=\"user.id\") class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None user: Optional[\"User\"] = Relationship(back_populates=\"tasks\") schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") user: Optional[\"User\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ReminderShow(ReminderDefault): task: Optional[Task] = None class UserBase(SQLModel): username: str password: str class User(UserBase, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) schedules: Optional[List[\"Schedule\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) reminders: Optional[List[\"Reminder\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\") user: Optional[User] = Relationship(back_populates=\"reminders\") class UserShow(UserBase): id: int tasks: Optional[List[\"Task\"]] = None schedules: Optional[List[\"Schedule\"]] = None reminders: Optional[List[\"Reminder\"]] = None class ChangePassword(SQLModel): old_password: str new_password: str","title":"Models"},{"location":"LR1/models/#_1","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"LR1/models/#_2","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b 1:M \u0438 M:M.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/models/#_3","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority user_id: int = Field(default=None, foreign_key=\"user.id\") class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None user: Optional[\"User\"] = Relationship(back_populates=\"tasks\") schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") user: Optional[\"User\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ReminderShow(ReminderDefault): task: Optional[Task] = None class UserBase(SQLModel): username: str password: str class User(UserBase, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) schedules: Optional[List[\"Schedule\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) reminders: Optional[List[\"Reminder\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\") user: Optional[User] = Relationship(back_populates=\"reminders\") class UserShow(UserBase): id: int tasks: Optional[List[\"Task\"]] = None schedules: Optional[List[\"Schedule\"]] = None reminders: Optional[List[\"Reminder\"]] = None class ChangePassword(SQLModel): old_password: str new_password: str","title":"\u041a\u043e\u0434"},{"location":"LR1/practices/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430. \u041f\u04201 \u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (2-3 \u0437\u0430\u043f\u0438\u0441\u0438), \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 (\u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432) \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 db.py temp_db = [ { \"task_id\": 1, \"task\": \"Complete project\", \"description\": \"Finish the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"High\", \"time_spent\": 120, }, { \"task_id\": 2, \"task\": \"Write documentation\", \"description\": \"Document the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Medium\", \"time_spent\": 50, }, { \"task_id\": 3, \"task\": \"Test application\", \"description\": \"Test the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Low\", \"time_spent\": 0, }, ] main.py from fastapi import FastAPI from models import * from typing_extensions import TypedDict from db import temp_db from typing import Optional, List import uvicorn app = FastAPI() @app.get(\"/\") def hello(): return \"Hello, user!\" @app.post(\"/create_task\") def create_task(task: Task): temp_db.append(task) return {\"status\": 200, \"data\": task} @app.put(\"/update_task/{task_id}\") def update_task(task_id: int, task: TaskDefault): for task in temp_db: if task[\"task_id\"] == task_id: task[\"title\"] = task[\"title\"] task[\"description\"] = task[\"description\"] task[\"deadline\"] = task[\"deadline\"] task[\"priority\"] = task[\"priority\"] task[\"time_spent\"] = task[\"time_spent\"] return {\"status\": 200, \"data\": task} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.delete(\"/delete_task/{task_id}\") def delete_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: temp_db.remove(task) return {\"status\": 200, \"data\": \"Task deleted\"} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks\") def get_tasks(): return temp_db @app.get(\"/task/{task_id}\") def get_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks/{task_id}/time\") def get_task_time(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task[\"time_spent\"] return {\"status\": 404, \"data\": \"Task not found\"} @app.put(\"/tasks/{task_id}/time\") def track_time_spent(task_id: int, time_spent: int): for task in temp_db: if task[\"task_id\"] == task_id: task[\"time_spent\"] = time_spent return {\"status\": 200, \"data\": task} return {\"status\": 404, \"data\": task} models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None \u041f\u04202 \u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414, \u0410\u041f\u0418 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u0445 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f many-to-many \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c. db.py from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:1@localhost/task_manager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session endpoints.py import datetime from fastapi import APIRouter, HTTPException, Depends from models import * from db import get_session from typing_extensions import TypedDict from sqlmodel import SQLModel, create_engine from sqlmodel.sql.expression import select app_router = APIRouter() @app_router.post(\"/create_task\", tags=[\"tasks\"]) def create_task(task: Task, session=Depends(get_session)): session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @app_router.put(\"/update_task/{task_id}\", tags=[\"tasks\"]) def update_task(task_id: int, task: TaskUpdate, session=Depends(get_session)): db_task = session.get(Task, task_id) if not db_task: return ({'status': 404, 'data': 'Task not found'}) task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @app_router.delete(\"/delete_task/{task_id}\", tags=[\"tasks\"]) def delete_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) session.delete(task) session.commit() return {\"ok\": True} @app_router.get(\"/tasks\", tags=[\"tasks\"],) def get_tasks(session=Depends(get_session)): return session.exec(select(Task)).all() @app_router.get(\"/task/{task_id}\", tags=[\"tasks\"]) def get_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return task @app_router.get(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def get_task_time(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return {\"time_spent\": task.time_spent} @app_router.put(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def track_time_spent(task_id: int, time_spent: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) task.time_spent = time_spent session.add(task) session.commit() session.refresh(task) return task main.py from fastapi import FastAPI import uvicorn from db import init_db from endpoints import app_router app = FastAPI() app.include_router(app_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True) models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\") \u041f\u04203 \u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0432\u043e\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0432\u0441\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 alembic.ini URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e.env-\u0444\u0430\u0439\u043b\u0430 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443. db.py from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:1@localhost/task_manager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session endpoints.py import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"} main.py from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == \"__main__\": uvicorn.run(\"main:app\", host=\"localhost\", port=8000, reload=True) models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\")","title":"Practices"},{"location":"LR1/practices/#_1","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"LR1/practices/#_2","text":"\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/practices/#1","text":"\u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (2-3 \u0437\u0430\u043f\u0438\u0441\u0438), \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 (\u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432) \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430","title":"\u041f\u04201"},{"location":"LR1/practices/#dbpy","text":"temp_db = [ { \"task_id\": 1, \"task\": \"Complete project\", \"description\": \"Finish the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"High\", \"time_spent\": 120, }, { \"task_id\": 2, \"task\": \"Write documentation\", \"description\": \"Document the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Medium\", \"time_spent\": 50, }, { \"task_id\": 3, \"task\": \"Test application\", \"description\": \"Test the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Low\", \"time_spent\": 0, }, ]","title":"db.py"},{"location":"LR1/practices/#mainpy","text":"from fastapi import FastAPI from models import * from typing_extensions import TypedDict from db import temp_db from typing import Optional, List import uvicorn app = FastAPI() @app.get(\"/\") def hello(): return \"Hello, user!\" @app.post(\"/create_task\") def create_task(task: Task): temp_db.append(task) return {\"status\": 200, \"data\": task} @app.put(\"/update_task/{task_id}\") def update_task(task_id: int, task: TaskDefault): for task in temp_db: if task[\"task_id\"] == task_id: task[\"title\"] = task[\"title\"] task[\"description\"] = task[\"description\"] task[\"deadline\"] = task[\"deadline\"] task[\"priority\"] = task[\"priority\"] task[\"time_spent\"] = task[\"time_spent\"] return {\"status\": 200, \"data\": task} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.delete(\"/delete_task/{task_id}\") def delete_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: temp_db.remove(task) return {\"status\": 200, \"data\": \"Task deleted\"} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks\") def get_tasks(): return temp_db @app.get(\"/task/{task_id}\") def get_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks/{task_id}/time\") def get_task_time(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task[\"time_spent\"] return {\"status\": 404, \"data\": \"Task not found\"} @app.put(\"/tasks/{task_id}/time\") def track_time_spent(task_id: int, time_spent: int): for task in temp_db: if task[\"task_id\"] == task_id: task[\"time_spent\"] = time_spent return {\"status\": 200, \"data\": task} return {\"status\": 404, \"data\": task}","title":"main.py"},{"location":"LR1/practices/#modelspy","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None","title":"models.py"},{"location":"LR1/practices/#2","text":"\u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414, \u0410\u041f\u0418 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u0445 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f many-to-many \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c.","title":"\u041f\u04202"},{"location":"LR1/practices/#dbpy_1","text":"from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:1@localhost/task_manager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"db.py"},{"location":"LR1/practices/#endpointspy","text":"import datetime from fastapi import APIRouter, HTTPException, Depends from models import * from db import get_session from typing_extensions import TypedDict from sqlmodel import SQLModel, create_engine from sqlmodel.sql.expression import select app_router = APIRouter() @app_router.post(\"/create_task\", tags=[\"tasks\"]) def create_task(task: Task, session=Depends(get_session)): session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @app_router.put(\"/update_task/{task_id}\", tags=[\"tasks\"]) def update_task(task_id: int, task: TaskUpdate, session=Depends(get_session)): db_task = session.get(Task, task_id) if not db_task: return ({'status': 404, 'data': 'Task not found'}) task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @app_router.delete(\"/delete_task/{task_id}\", tags=[\"tasks\"]) def delete_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) session.delete(task) session.commit() return {\"ok\": True} @app_router.get(\"/tasks\", tags=[\"tasks\"],) def get_tasks(session=Depends(get_session)): return session.exec(select(Task)).all() @app_router.get(\"/task/{task_id}\", tags=[\"tasks\"]) def get_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return task @app_router.get(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def get_task_time(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return {\"time_spent\": task.time_spent} @app_router.put(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def track_time_spent(task_id: int, time_spent: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) task.time_spent = time_spent session.add(task) session.commit() session.refresh(task) return task","title":"endpoints.py"},{"location":"LR1/practices/#mainpy_1","text":"from fastapi import FastAPI import uvicorn from db import init_db from endpoints import app_router app = FastAPI() app.include_router(app_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"main.py"},{"location":"LR1/practices/#modelspy_1","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\")","title":"models.py"},{"location":"LR1/practices/#3","text":"\u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0432\u043e\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0432\u0441\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 alembic.ini URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e.env-\u0444\u0430\u0439\u043b\u0430 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443.","title":"\u041f\u04203"},{"location":"LR1/practices/#dbpy_2","text":"from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:1@localhost/task_manager' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"db.py"},{"location":"LR1/practices/#endpointspy_1","text":"import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"}","title":"endpoints.py"},{"location":"LR1/practices/#mainpy_2","text":"from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == \"__main__\": uvicorn.run(\"main:app\", host=\"localhost\", port=8000, reload=True)","title":"main.py"},{"location":"LR1/practices/#modelspy_2","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\")","title":"models.py"},{"location":"LR2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: AscyncIO Threading Multiprocessing \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f (\u0441) AsyncIO 0.0329 Threading 0.0339 Multiprocessing 0.2460 \u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 Database URLs AscyncIO Threading Multiprocessing \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f (\u0441) AsyncIO 0.9089 Threading 11.8778 Multiprocessing 2.5957","title":"Home"},{"location":"LR2/#1-threading-multiprocessing-async-python","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"LR2/#_1","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:"},{"location":"LR2/#ascyncio","text":"","title":"AscyncIO"},{"location":"LR2/#threading","text":"","title":"Threading"},{"location":"LR2/#multiprocessing","text":"","title":"Multiprocessing"},{"location":"LR2/#_2","text":"\u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f (\u0441) AsyncIO 0.0329 Threading 0.0339 Multiprocessing 0.2460","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432"},{"location":"LR2/#2-","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR2/#_3","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"LR2/#database","text":"","title":"Database"},{"location":"LR2/#urls","text":"","title":"URLs"},{"location":"LR2/#ascyncio_1","text":"","title":"AscyncIO"},{"location":"LR2/#threading_1","text":"","title":"Threading"},{"location":"LR2/#multiprocessing_1","text":"","title":"Multiprocessing"},{"location":"LR2/#_4","text":"\u041c\u0435\u0442\u043e\u0434 \u0412\u0440\u0435\u043c\u044f (\u0441) AsyncIO 0.9089 Threading 11.8778 Multiprocessing 2.5957","title":"\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432"},{"location":"LR2/leetcode/","text":"Minimum Size Subarray Sum Given an array of positive integers nums and a positive integer target , return the minimal length of a subarray whose sum is greater than or equal to target . If there is no such subarray, return 0 instead. class Solution: def minSubArrayLen(self, target: int, nums: List[int]) -> int: left = 0 total = 0 min_length = float('inf') for right in range(len(nums)): total += nums[right] while total >= target: min_length = min(min_length, right - left + 1) total -= nums[left] left += 1 return min_length if min_length != float('inf') else 0 3Sum Given an integer array nums , return all the triplets [nums[i], nums[j], nums[k]] such that i != j , i != k , and j != k , and nums[i] + nums[j] + nums[k] == 0 . class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: nums.sort() res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = 0, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: res.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return res Spiral Matrix Given an m x n matrix, return all elements of the matrix in spiral order. class Solution: def spiralOrder(self, matrix: List[List[int]]) -> List[int]: if not matrix: return [] res = [] while matrix: res += matrix.pop(0) if matrix and matrix[0]: for row in matrix: res.append(row.pop()) if matrix: res += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: res.append(row.pop(0)) return res Valid Sudoku Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: - Each row must contain the digits 1-9 without repetition. - Each column must contain the digits 1-9 without repetition. - Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. class Solution: def isValidSudoku(self, board: List[List[str]]) -> bool: rows = [set() for _ in range(9)] cols = [set() for _ in range(9)] boxes = [set() for _ in range(9)] for r in range(9): for c in range(9): if board[r][c] == '.': continue if (board[r][c] in rows[r] or board[r][c] in cols[c] or board[r][c] in boxes[(r // 3) * 3 + (c // 3)]): return False rows[r].add(board[r][c]) cols[c].add(board[r][c]) boxes[(r // 3) * 3 + (c // 3)].add(board[r][c]) return True Longest Substring Without Repeating Characters Given a string s , find the length of the longest substring without repeating characters. class Solution: def lengthOfLongestSubstring(self, s: String) -> int: char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length","title":"Leetcode"},{"location":"LR2/leetcode/#minimum-size-subarray-sum","text":"Given an array of positive integers nums and a positive integer target , return the minimal length of a subarray whose sum is greater than or equal to target . If there is no such subarray, return 0 instead. class Solution: def minSubArrayLen(self, target: int, nums: List[int]) -> int: left = 0 total = 0 min_length = float('inf') for right in range(len(nums)): total += nums[right] while total >= target: min_length = min(min_length, right - left + 1) total -= nums[left] left += 1 return min_length if min_length != float('inf') else 0","title":"Minimum Size Subarray Sum"},{"location":"LR2/leetcode/#3sum","text":"Given an integer array nums , return all the triplets [nums[i], nums[j], nums[k]] such that i != j , i != k , and j != k , and nums[i] + nums[j] + nums[k] == 0 . class Solution: def threeSum(self, nums: List[int]) -> List[List[int]]: nums.sort() res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = 0, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: res.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return res","title":"3Sum"},{"location":"LR2/leetcode/#spiral-matrix","text":"Given an m x n matrix, return all elements of the matrix in spiral order. class Solution: def spiralOrder(self, matrix: List[List[int]]) -> List[int]: if not matrix: return [] res = [] while matrix: res += matrix.pop(0) if matrix and matrix[0]: for row in matrix: res.append(row.pop()) if matrix: res += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: res.append(row.pop(0)) return res","title":"Spiral Matrix"},{"location":"LR2/leetcode/#valid-sudoku","text":"Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: - Each row must contain the digits 1-9 without repetition. - Each column must contain the digits 1-9 without repetition. - Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. class Solution: def isValidSudoku(self, board: List[List[str]]) -> bool: rows = [set() for _ in range(9)] cols = [set() for _ in range(9)] boxes = [set() for _ in range(9)] for r in range(9): for c in range(9): if board[r][c] == '.': continue if (board[r][c] in rows[r] or board[r][c] in cols[c] or board[r][c] in boxes[(r // 3) * 3 + (c // 3)]): return False rows[r].add(board[r][c]) cols[c].add(board[r][c]) boxes[(r // 3) * 3 + (c // 3)].add(board[r][c]) return True","title":"Valid Sudoku"},{"location":"LR2/leetcode/#longest-substring-without-repeating-characters","text":"Given a string s , find the length of the longest substring without repeating characters. class Solution: def lengthOfLongestSubstring(self, s: String) -> int: char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length","title":"Longest Substring Without Repeating Characters"},{"location":"LR2/task1/async/","text":"import asyncio from time import time async def calculate_partial_sum(start, end): return sum(range(start, end + 1)) async def async_sum(n, num_tasks): step = n // num_tasks tasks = [calculate_partial_sum(i * step + 1, (i + 1) * step if i != num_tasks - 1 else n) for i in range(num_tasks)] return sum(await asyncio.gather(*tasks)) async def main(): start_time = time() result = await async_sum(1000000, 4) end_time = time() print(f\"Async/Await result: {result} in {end_time - start_time:.4f} seconds\") if __name__ == \"__main__\": asyncio.run(main())","title":"AsyncIO"},{"location":"LR2/task1/multiproc/","text":"import multiprocessing as mp from time import time def calculate_partial_sum(start, end): return sum(range(start, end + 1)) def process_sum(n, num_processes): pool = mp.Pool(num_processes) step = n // num_processes tasks = [(i * step + 1, (i + 1) * step if i != num_processes - 1 else n) for i in range(num_processes)] results = pool.starmap(calculate_partial_sum, tasks) pool.close() pool.join() return sum(results) if __name__ == \"__main__\": start_time = time() result = process_sum(1000000, 4) end_time = time() print(f\"Multiprocessing result: {result} in {end_time - start_time:.4f} seconds\")","title":"Multiprocessing"},{"location":"LR2/task1/thread/","text":"import threading from time import time def calculate_partial_sum(start, end): return sum(range(start, end + 1)) def thread_sum(n, num_threads): threads = [] result = [0]*num_threads step = n // num_threads def worker(tid, start, end): result[tid] = calculate_partial_sum(start, end) for i in range(num_threads): start = i * step + 1 end = (i + 1) * step if i != num_threads - 1 else n threads.append(threading.Thread(target=worker, args=(i, start, end))) threads[-1].start() for thread in threads: thread.join() return sum(result) if __name__ == \"__main__\": start_time = time() result = thread_sum(1000000, 4) end_time = time() print(f\"Threading result: {result} in {end_time - start_time:.4f} seconds\")","title":"Threading"},{"location":"LR2/task2/db/","text":"from sqlmodel import SQLModel, Field, Session, create_engine import os from dotenv import load_dotenv load_dotenv() engine = create_engine(os.getenv(\"DB_URL\"), echo=True) class Article(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) title: str url: str text: str def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session init_db()","title":"Database"},{"location":"LR2/task2/parse_async/","text":"import aiohttp import asyncio from bs4 import BeautifulSoup from time import time from db import get_session, Article from urls import URLS urls = URLS async def parse_and_save(url): async with aiohttp.ClientSession() as session: async with session.get(url) as response: content = await response.text() soup = BeautifulSoup(content, 'html.parser') title = soup.find('h1', class_='tm-title').get_text(strip=True) text = soup.find('div', class_='tm-article-body').get_text(strip=True) with next(get_session()) as db_session: article = Article(title=title, url=url, text=text) db_session.add(article) db_session.commit() print(f\"Saved: {title}\") async def async_parse(urls): tasks = [parse_and_save(url) for url in urls] await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time() asyncio.run(async_parse(urls)) end_time = time() print(f\"Async/Await finished in {end_time - start_time:.4f} seconds\")","title":"AsyncIO"},{"location":"LR2/task2/parse_multiproc/","text":"import multiprocessing as mp from time import time from db import get_session, Article from urls import URLS import requests from bs4 import BeautifulSoup urls = URLS def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.find('h1', class_='tm-title').get_text(strip=True) text = soup.find('div', class_='tm-article-body').get_text(strip=True) with next(get_session()) as session: article = Article(title=title, url=url, text=text) session.add(article) session.commit() print(f\"Saved: {title}\") def mp_parse(urls): processes = [] for url in urls: process = mp.Process(target=parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() if __name__ == \"__main__\": start_time = time() mp_parse(urls) end_time = time() print(f\"Multiprocessing finished in {end_time - start_time:.4f} seconds\")","title":"Multiprocessing"},{"location":"LR2/task2/parse_thread/","text":"import threading import requests from bs4 import BeautifulSoup from time import time from db import get_session, Article from urls import URLS urls = URLS def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.find('h1', class_='tm-title').get_text(strip=True) text = soup.find('div', class_='tm-article-body').get_text(strip=True) with next(get_session()) as session: article = Article(title=title, url=url, text=text) session.add(article) session.commit() print(f\"Saved: {title}\") def thread_parse(urls): threads = [] for url in urls: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": start_time = time() thread_parse(urls) end_time = time() print(f\"Threading finished in {end_time - start_time:.4f} seconds\")","title":"Threading"},{"location":"LR2/task2/url/","text":"URLS = [ 'https://habr.com/ru/articles/799891/', 'https://habr.com/ru/companies/netologyru/articles/781664/', 'https://habr.com/ru/companies/selectel/articles/801765/', 'https://habr.com/ru/companies/slurm/articles/728340/', ]","title":"URLs"},{"location":"LR3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438 \u0426\u0435\u043b\u044c \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. \u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker Docker \u2014 \u044d\u0442\u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445. \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0432\u0441\u0435 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0439 Docker, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435. Docker \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2 \u0420\u0435\u0443\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: parser_api/main.py from fastapi import FastAPI, HTTPException, Depends, status, BackgroundTasks from db import get_session from url_parser import parse_and_save from models import Article import uvicorn app = FastAPI() @app.post(\"/parse\") def parse(url: str, background_tasks: BackgroundTasks, session=Depends(get_session)): try: background_tasks.add_task(parse_and_save, url, session) except Exception as e: raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e)) return {\"message\": \"Parsing started\"} parser_api/url_parser.py import requests from bs4 import BeautifulSoup from models import Article from celery_main import celery_app def parse_and_save(url, db_session): try: response = requests.get(url) response.raise_for_status() content = response.text soup = BeautifulSoup(content, 'html.parser') title = soup.find('h1', class_='tm-title').get_text(strip=True) text = soup.find('div', class_='tm-article-body').get_text(strip=True) article = Article(title=title, url=url, text=text) db_session.add(article) db_session.commit() except requests.RequestException as e: print(f\"An error occurred: {e}\") \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Dockerfile: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u0430\u0440\u0435\u0441\u0435\u0440\u043e\u043c. \u0412 Dockerfile \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: parser_api/Dockerfile FROM python:3.11-slim WORKDIR /parser_api COPY requirements.txt requirements.txt RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . EXPOSE 8080 CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"] app/Dockerfile FROM python:3.11-slim WORKDIR /app COPY requirements.txt requirements.txt RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"] \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c docker-compose.yml \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0445 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u043f\u043e\u0440\u0442\u044b \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: docker-compose.yaml version: '3.8' services: fastapi_app: build: context: ./app dockerfile: Dockerfile ports: - \"8000:80\" env_file: - .env depends_on: - db networks: - backend parser_api: build: context: ./parser_api dockerfile: Dockerfile ports: - \"8080:8080\" env_file: - .env depends_on: - db networks: - backend db: image: postgres restart: always environment: POSTGRES_USER: ${DB_USER} POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_DB: ${DB_NAME} ports: - \"5432:5432\" volumes: - postgres_data:/var/lib/postgresql/data networks: - backend volumes: postgres_data: \u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: parser_api/main.py from fastapi import FastAPI, HTTPException, Depends, status, BackgroundTasks from db import get_session from url_parser import parse_and_save from models import Article import uvicorn app = FastAPI() @app.post(\"/parse\") def parse(url: str, background_tasks: BackgroundTasks, session=Depends(get_session)): try: background_tasks.add_task(parse_and_save, url, session) except Exception as e: raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e)) return {\"message\": \"Parsing started\"} @app.get(\"/articles\") def get_articles(session=Depends(get_session)) -> list[Article]: articles = session.query(Article).all() return articles @app.get(\"/article/{article_id}\") def get_article(article_id: int, session=Depends(get_session)): article = session.get(Article, article_id) if article is None: raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Article not found\") return article if __name__ == '__main__': uvicorn.run('main:app', host=\"0.0.0.0\", port=8080, reload=True) parser_api/models.py from sqlmodel import SQLModel, Field class Article(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) title: str url: str text: str app/models.py ... class Article(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) title: str url: str text: str \u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0417\u0430\u0434\u0430\u043d\u0438\u0435 * \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Celery \u0438 Redis \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f Celery \u0438 Redis \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. Celery \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 \u0444\u043e\u043d\u0435, \u0430 Redis \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Celery. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. parser_api/celery_main.py from celery import Celery import os celery_app = Celery( \"worker\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) celery_app.conf.update( task_routes={ \"url_parser.parse_and_save\": \"main-queue\", }, ) parser_api/celery_run.py from celery_main import celery_app if __name__ == \"__main__\": celery_app.start() parser_api/url_parser.py import requests ... @celery_app.task def parse_and_save(url, db_session): try: ... print(f\"An error occurred: {e}\") \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f Redis \u0438 Celery worker \u0432 docker-compose.yml. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 docker-compose.yaml version: '3.8' services: fastapi_app: build: context: ./app dockerfile: Dockerfile ports: - \"8000:80\" env_file: - .env depends_on: - db networks: - backend parser_api: build: context: ./parser_api dockerfile: Dockerfile ports: - \"8080:8080\" env_file: - .env depends_on: - db - redis networks: - backend db: image: postgres restart: always environment: POSTGRES_USER: ${DB_USER} POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_DB: ${DB_NAME} ports: - \"5432:5432\" volumes: - postgres_data:/var/lib/postgresql/data networks: - backend redis: image: redis:6 ports: - \"6379:6379\" networks: - backend celery_worker: build: context: ./parser_api dockerfile: Dockerfile command: [\"celery\", \"-A\", \"celery_main.celery_app\", \"worker\", \"--loglevel=info\"] env_file: - .env depends_on: - redis - db networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"Home"},{"location":"LR3/#3-fastapi-docker","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438"},{"location":"LR3/#_1","text":"\u0426\u0435\u043b\u044c \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":""},{"location":"LR3/#1-fastapi-docker","text":"Docker \u2014 \u044d\u0442\u043e \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u0445. \u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u0432\u0441\u0435 \u0435\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u0435\u0434\u0438\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0439 Docker, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435. Docker \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443, \u043f\u043e\u0432\u044b\u0441\u0438\u0442\u044c \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 1: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker"},{"location":"LR3/#http-fastapi-socket","text":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:","title":"\u0420\u0435\u0443\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438."},{"location":"LR3/#parser_apimainpy","text":"from fastapi import FastAPI, HTTPException, Depends, status, BackgroundTasks from db import get_session from url_parser import parse_and_save from models import Article import uvicorn app = FastAPI() @app.post(\"/parse\") def parse(url: str, background_tasks: BackgroundTasks, session=Depends(get_session)): try: background_tasks.add_task(parse_and_save, url, session) except Exception as e: raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e)) return {\"message\": \"Parsing started\"}","title":"parser_api/main.py"},{"location":"LR3/#parser_apiurl_parserpy","text":"import requests from bs4 import BeautifulSoup from models import Article from celery_main import celery_app def parse_and_save(url, db_session): try: response = requests.get(url) response.raise_for_status() content = response.text soup = BeautifulSoup(content, 'html.parser') title = soup.find('h1', class_='tm-title').get_text(strip=True) text = soup.find('div', class_='tm-article-body').get_text(strip=True) article = Article(title=title, url=url, text=text) db_session.add(article) db_session.commit() except requests.RequestException as e: print(f\"An error occurred: {e}\")","title":"parser_api/url_parser.py"},{"location":"LR3/#dockerfile","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u043a\u0438 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u0430\u0440\u0435\u0441\u0435\u0440\u043e\u043c. \u0412 Dockerfile \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043e\u0431\u0440\u0430\u0437, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435:","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 Dockerfile:"},{"location":"LR3/#parser_apidockerfile","text":"FROM python:3.11-slim WORKDIR /parser_api COPY requirements.txt requirements.txt RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . EXPOSE 8080 CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]","title":"parser_api/Dockerfile"},{"location":"LR3/#appdockerfile","text":"FROM python:3.11-slim WORKDIR /app COPY requirements.txt requirements.txt RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]","title":"app/Dockerfile"},{"location":"LR3/#docker-compose","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c docker-compose.yml \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0445 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b, \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u043f\u043e\u0440\u0442\u044b \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0420\u0435\u0448\u0435\u043d\u0438\u0435:","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Docker Compose \u0444\u0430\u0439\u043b\u0430"},{"location":"LR3/#docker-composeyaml","text":"version: '3.8' services: fastapi_app: build: context: ./app dockerfile: Dockerfile ports: - \"8000:80\" env_file: - .env depends_on: - db networks: - backend parser_api: build: context: ./parser_api dockerfile: Dockerfile ports: - \"8080:8080\" env_file: - .env depends_on: - db networks: - backend db: image: postgres restart: always environment: POSTGRES_USER: ${DB_USER} POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_DB: ${DB_NAME} ports: - \"5432:5432\" volumes: - postgres_data:/var/lib/postgresql/data networks: - backend volumes: postgres_data:","title":"docker-compose.yaml"},{"location":"LR3/#2-fastapi","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0420\u0435\u0448\u0435\u043d\u0438\u0435:","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 2: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI"},{"location":"LR3/#parser_apimainpy_1","text":"from fastapi import FastAPI, HTTPException, Depends, status, BackgroundTasks from db import get_session from url_parser import parse_and_save from models import Article import uvicorn app = FastAPI() @app.post(\"/parse\") def parse(url: str, background_tasks: BackgroundTasks, session=Depends(get_session)): try: background_tasks.add_task(parse_and_save, url, session) except Exception as e: raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e)) return {\"message\": \"Parsing started\"} @app.get(\"/articles\") def get_articles(session=Depends(get_session)) -> list[Article]: articles = session.query(Article).all() return articles @app.get(\"/article/{article_id}\") def get_article(article_id: int, session=Depends(get_session)): article = session.get(Article, article_id) if article is None: raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=\"Article not found\") return article if __name__ == '__main__': uvicorn.run('main:app', host=\"0.0.0.0\", port=8080, reload=True)","title":"parser_api/main.py"},{"location":"LR3/#parser_apimodelspy","text":"from sqlmodel import SQLModel, Field class Article(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) title: str url: str text: str","title":"parser_api/models.py"},{"location":"LR3/#appmodelspy","text":"... class Article(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) title: str url: str text: str","title":"app/models.py"},{"location":"LR3/#3-fastapi","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 * \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Celery \u0438 Redis \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u043b\u044f Celery \u0438 Redis \u0432 \u043f\u0440\u043e\u0435\u043a\u0442. Celery \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0434\u0430\u0447 \u0432 \u0444\u043e\u043d\u0435, \u0430 Redis \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u0432 \u0440\u043e\u043b\u0438 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0437\u0430\u0434\u0430\u0447 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432.","title":"\u041f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0430 3: \u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c"},{"location":"LR3/#celery-url","text":"","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f Celery. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0444\u043e\u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435."},{"location":"LR3/#parser_apicelery_mainpy","text":"from celery import Celery import os celery_app = Celery( \"worker\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) celery_app.conf.update( task_routes={ \"url_parser.parse_and_save\": \"main-queue\", }, )","title":"parser_api/celery_main.py"},{"location":"LR3/#parser_apicelery_runpy","text":"from celery_main import celery_app if __name__ == \"__main__\": celery_app.start()","title":"parser_api/celery_run.py"},{"location":"LR3/#parser_apiurl_parserpy_1","text":"import requests ... @celery_app.task def parse_and_save(url, db_session): try: ... print(f\"An error occurred: {e}\")","title":"parser_api/url_parser.py"},{"location":"LR3/#redis-celery-worker-docker-composeyml","text":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f Redis \u0438 Celery worker \u0432 docker-compose.yml. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430."},{"location":"LR3/#docker-composeyaml_1","text":"version: '3.8' services: fastapi_app: build: context: ./app dockerfile: Dockerfile ports: - \"8000:80\" env_file: - .env depends_on: - db networks: - backend parser_api: build: context: ./parser_api dockerfile: Dockerfile ports: - \"8080:8080\" env_file: - .env depends_on: - db - redis networks: - backend db: image: postgres restart: always environment: POSTGRES_USER: ${DB_USER} POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_DB: ${DB_NAME} ports: - \"5432:5432\" volumes: - postgres_data:/var/lib/postgresql/data networks: - backend redis: image: redis:6 ports: - \"6379:6379\" networks: - backend celery_worker: build: context: ./parser_api dockerfile: Dockerfile command: [\"celery\", \"-A\", \"celery_main.celery_app\", \"worker\", \"--loglevel=info\"] env_file: - .env depends_on: - redis - db networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"docker-compose.yaml"},{"location":"LR3/leetcode/","text":"Group Anagrams Given an array of strings strs , group the anagrams together. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. class Solution: def groupAnagrams(self, strs: List[str]) -> List[List[str]]: from collections import defaultdict anagrams = defaultdict(list) for s in strs: sorted_str = ''.join(sorted(s)) anagrams[sorted_str].append(s) return list(anagrams.values()) Longest Consecutive Sequence Given an unsorted array of integers nums , return the length of the longest consecutive elements sequence. The algorithm must run in O(n) time. class Solution: def longestConsecutive(self, nums: List[int]) -> int: num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak Game of Life The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules: - Any live cell with fewer than two live neighbors dies as if caused by under-population. - Any live cell with two or three live neighbors lives on to the next generation. - Any live cell with more than three live neighbors dies, as if by over-population. - Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Given the current state of the m x n grid board , return the next state. class Solution: def gameOfLife(self, board: List[List[int]]) -> None: m, n = len(board), len(board[0]) def count_neighbors(r, c): count = 0 for i in range(max(0, r-1), min(m, r+2)): for j in range(max(0, c-1), min(n, c+2)): count += board[i][j] & 1 count -= board[r][c] & 1 return count for r in range(m): for c in range(n): live_neighbors = count_neighbors(r, c) if board[r][c] == 1 and (live_neighbors < 2 or live_neighbors > 3): board[r][c] = 1 # Dies elif board[r][c] == 0 and live_neighbors == 3: board[r][c] = 2 # Becomes live for r in range(m): for c in range(n): board[r][c] >>= 1","title":"Leetcode"},{"location":"LR3/leetcode/#group-anagrams","text":"Given an array of strings strs , group the anagrams together. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. class Solution: def groupAnagrams(self, strs: List[str]) -> List[List[str]]: from collections import defaultdict anagrams = defaultdict(list) for s in strs: sorted_str = ''.join(sorted(s)) anagrams[sorted_str].append(s) return list(anagrams.values())","title":"Group Anagrams"},{"location":"LR3/leetcode/#longest-consecutive-sequence","text":"Given an unsorted array of integers nums , return the length of the longest consecutive elements sequence. The algorithm must run in O(n) time. class Solution: def longestConsecutive(self, nums: List[int]) -> int: num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak","title":"Longest Consecutive Sequence"},{"location":"LR3/leetcode/#game-of-life","text":"The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules: - Any live cell with fewer than two live neighbors dies as if caused by under-population. - Any live cell with two or three live neighbors lives on to the next generation. - Any live cell with more than three live neighbors dies, as if by over-population. - Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Given the current state of the m x n grid board , return the next state. class Solution: def gameOfLife(self, board: List[List[int]]) -> None: m, n = len(board), len(board[0]) def count_neighbors(r, c): count = 0 for i in range(max(0, r-1), min(m, r+2)): for j in range(max(0, c-1), min(n, c+2)): count += board[i][j] & 1 count -= board[r][c] & 1 return count for r in range(m): for c in range(n): live_neighbors = count_neighbors(r, c) if board[r][c] == 1 and (live_neighbors < 2 or live_neighbors > 3): board[r][c] = 1 # Dies elif board[r][c] == 0 and live_neighbors == 3: board[r][c] = 2 # Becomes live for r in range(m): for c in range(n): board[r][c] >>= 1","title":"Game of Life"}]}